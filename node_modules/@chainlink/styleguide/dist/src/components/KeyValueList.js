import Card from '@material-ui/core/Card';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Typography from '@material-ui/core/Typography';
import { titleCase } from 'title-case';
import { noCase } from 'change-case';
import React from 'react';
import { CardTitle } from './Cards/Title';
const renderKey = (k, titleize) => titleize ? titleCase(noCase(k)) : k;
const renderEntries = (entries, titleize) => entries.map(([k, v]) => (React.createElement(TableRow, { key: k },
    React.createElement(Col, null, renderKey(k, titleize)),
    React.createElement(Col, null, String(v)))));
const renderBody = (entries, error, titleize) => {
    if (error) {
        return React.createElement(ErrorRow, null, error);
    }
    else if (entries.length === 0) {
        return React.createElement(FetchingRow, null);
    }
    else {
        return renderEntries(entries, titleize);
    }
};
const SpanRow = ({ children }) => (React.createElement(TableRow, null,
    React.createElement(TableCell, { component: "th", scope: "row", colSpan: 3 }, children)));
const FetchingRow = () => React.createElement(SpanRow, null, "...");
const ErrorRow = ({ children }) => React.createElement(SpanRow, null, children);
const Col = ({ children }) => (React.createElement(TableCell, null,
    React.createElement(Typography, { variant: "body1" },
        React.createElement("span", null, children))));
const HeadCol = ({ children }) => (React.createElement(TableCell, null,
    React.createElement(Typography, { variant: "body1", color: "textSecondary" }, children)));
export const KeyValueList = ({ entries, error = '', showHead = false, title, titleize = false, }) => (React.createElement(Card, null,
    title && React.createElement(CardTitle, { divider: true }, title),
    React.createElement(Table, null,
        showHead && (React.createElement(TableHead, null,
            React.createElement(TableRow, null,
                React.createElement(HeadCol, null, "Key"),
                React.createElement(HeadCol, null, "Value")))),
        React.createElement(TableBody, null, renderBody(entries, error, titleize)))));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5VmFsdWVMaXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvS2V5VmFsdWVMaXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSx3QkFBd0IsQ0FBQTtBQUN6QyxPQUFPLEtBQUssTUFBTSx5QkFBeUIsQ0FBQTtBQUMzQyxPQUFPLFNBQVMsTUFBTSw2QkFBNkIsQ0FBQTtBQUNuRCxPQUFPLFNBQVMsTUFBTSw2QkFBNkIsQ0FBQTtBQUNuRCxPQUFPLFNBQVMsTUFBTSw2QkFBNkIsQ0FBQTtBQUNuRCxPQUFPLFFBQVEsTUFBTSw0QkFBNEIsQ0FBQTtBQUNqRCxPQUFPLFVBQVUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDcEMsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFekMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFTLEVBQUUsUUFBaUIsRUFBRSxFQUFFLENBQ2pELFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFFckMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUE2QixFQUFFLFFBQWlCLEVBQUUsRUFBRSxDQUN6RSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ3RCLG9CQUFDLFFBQVEsSUFBQyxHQUFHLEVBQUUsQ0FBQztJQUNkLG9CQUFDLEdBQUcsUUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFPO0lBQ25DLG9CQUFDLEdBQUcsUUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQU8sQ0FDYixDQUNaLENBQUMsQ0FBQTtBQUVKLE1BQU0sVUFBVSxHQUFHLENBQ2pCLE9BQTZCLEVBQzdCLEtBQWEsRUFDYixRQUFpQixFQUNqQixFQUFFO0lBQ0YsSUFBSSxLQUFLLEVBQUU7UUFDVCxPQUFPLG9CQUFDLFFBQVEsUUFBRSxLQUFLLENBQVksQ0FBQTtLQUNwQztTQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDL0IsT0FBTyxvQkFBQyxXQUFXLE9BQUcsQ0FBQTtLQUN2QjtTQUFNO1FBQ0wsT0FBTyxhQUFhLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0tBQ3hDO0FBQ0gsQ0FBQyxDQUFBO0FBTUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FDOUMsb0JBQUMsUUFBUTtJQUNQLG9CQUFDLFNBQVMsSUFBQyxTQUFTLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFFLENBQUMsSUFDN0MsUUFBUSxDQUNDLENBQ0gsQ0FDWixDQUFBO0FBRUQsTUFBTSxXQUFXLEdBQUcsR0FBRyxFQUFFLENBQUMsb0JBQUMsT0FBTyxjQUFjLENBQUE7QUFNaEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBaUIsRUFBRSxFQUFFLENBQUMsb0JBQUMsT0FBTyxRQUFFLFFBQVEsQ0FBVyxDQUFBO0FBTS9FLE1BQU0sR0FBRyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQVksRUFBRSxFQUFFLENBQUMsQ0FDdEMsb0JBQUMsU0FBUztJQUNSLG9CQUFDLFVBQVUsSUFBQyxPQUFPLEVBQUMsT0FBTztRQUN6QixrQ0FBTyxRQUFRLENBQVEsQ0FDWixDQUNILENBQ2IsQ0FBQTtBQU1ELE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQWdCLEVBQUUsRUFBRSxDQUFDLENBQzlDLG9CQUFDLFNBQVM7SUFDUixvQkFBQyxVQUFVLElBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsZUFBZSxJQUM5QyxRQUFRLENBQ0UsQ0FDSCxDQUNiLENBQUE7QUFVRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUMzQixPQUFPLEVBQ1AsS0FBSyxHQUFHLEVBQUUsRUFDVixRQUFRLEdBQUcsS0FBSyxFQUNoQixLQUFLLEVBQ0wsUUFBUSxHQUFHLEtBQUssR0FDRSxFQUFFLEVBQUUsQ0FBQyxDQUN2QixvQkFBQyxJQUFJO0lBQ0YsS0FBSyxJQUFJLG9CQUFDLFNBQVMsSUFBQyxPQUFPLFVBQUUsS0FBSyxDQUFhO0lBRWhELG9CQUFDLEtBQUs7UUFDSCxRQUFRLElBQUksQ0FDWCxvQkFBQyxTQUFTO1lBQ1Isb0JBQUMsUUFBUTtnQkFDUCxvQkFBQyxPQUFPLGNBQWM7Z0JBQ3RCLG9CQUFDLE9BQU8sZ0JBQWdCLENBQ2YsQ0FDRCxDQUNiO1FBQ0Qsb0JBQUMsU0FBUyxRQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFhLENBQ3ZELENBQ0gsQ0FDUixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcmQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZCdcbmltcG9ydCBUYWJsZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZSdcbmltcG9ydCBUYWJsZUJvZHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVCb2R5J1xuaW1wb3J0IFRhYmxlQ2VsbCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUNlbGwnXG5pbXBvcnQgVGFibGVIZWFkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlSGVhZCdcbmltcG9ydCBUYWJsZVJvdyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVJvdydcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknXG5pbXBvcnQgeyB0aXRsZUNhc2UgfSBmcm9tICd0aXRsZS1jYXNlJ1xuaW1wb3J0IHsgbm9DYXNlIH0gZnJvbSAnY2hhbmdlLWNhc2UnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBDYXJkVGl0bGUgfSBmcm9tICcuL0NhcmRzL1RpdGxlJ1xuXG5jb25zdCByZW5kZXJLZXkgPSAoazogc3RyaW5nLCB0aXRsZWl6ZTogYm9vbGVhbikgPT5cbiAgdGl0bGVpemUgPyB0aXRsZUNhc2Uobm9DYXNlKGspKSA6IGtcblxuY29uc3QgcmVuZGVyRW50cmllcyA9IChlbnRyaWVzOiBBcnJheTxBcnJheTxzdHJpbmc+PiwgdGl0bGVpemU6IGJvb2xlYW4pID0+XG4gIGVudHJpZXMubWFwKChbaywgdl0pID0+IChcbiAgICA8VGFibGVSb3cga2V5PXtrfT5cbiAgICAgIDxDb2w+e3JlbmRlcktleShrLCB0aXRsZWl6ZSl9PC9Db2w+XG4gICAgICA8Q29sPntTdHJpbmcodil9PC9Db2w+XG4gICAgPC9UYWJsZVJvdz5cbiAgKSlcblxuY29uc3QgcmVuZGVyQm9keSA9IChcbiAgZW50cmllczogQXJyYXk8QXJyYXk8c3RyaW5nPj4sXG4gIGVycm9yOiBzdHJpbmcsXG4gIHRpdGxlaXplOiBib29sZWFuLFxuKSA9PiB7XG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiA8RXJyb3JSb3c+e2Vycm9yfTwvRXJyb3JSb3c+XG4gIH0gZWxzZSBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gPEZldGNoaW5nUm93IC8+XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlbmRlckVudHJpZXMoZW50cmllcywgdGl0bGVpemUpXG4gIH1cbn1cblxuaW50ZXJmYWNlIFNwYW5Sb3dQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuY29uc3QgU3BhblJvdyA9ICh7IGNoaWxkcmVuIH06IFNwYW5Sb3dQcm9wcykgPT4gKFxuICA8VGFibGVSb3c+XG4gICAgPFRhYmxlQ2VsbCBjb21wb25lbnQ9XCJ0aFwiIHNjb3BlPVwicm93XCIgY29sU3Bhbj17M30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9UYWJsZUNlbGw+XG4gIDwvVGFibGVSb3c+XG4pXG5cbmNvbnN0IEZldGNoaW5nUm93ID0gKCkgPT4gPFNwYW5Sb3c+Li4uPC9TcGFuUm93PlxuXG5pbnRlcmZhY2UgRXJyb3JSb3dQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuY29uc3QgRXJyb3JSb3cgPSAoeyBjaGlsZHJlbiB9OiBFcnJvclJvd1Byb3BzKSA9PiA8U3BhblJvdz57Y2hpbGRyZW59PC9TcGFuUm93PlxuXG5pbnRlcmZhY2UgQ29sUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG59XG5cbmNvbnN0IENvbCA9ICh7IGNoaWxkcmVuIH06IENvbFByb3BzKSA9PiAoXG4gIDxUYWJsZUNlbGw+XG4gICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkxXCI+XG4gICAgICA8c3Bhbj57Y2hpbGRyZW59PC9zcGFuPlxuICAgIDwvVHlwb2dyYXBoeT5cbiAgPC9UYWJsZUNlbGw+XG4pXG5cbmludGVyZmFjZSBIZWFkQ29sUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG59XG5cbmNvbnN0IEhlYWRDb2wgPSAoeyBjaGlsZHJlbiB9OiBIZWFkQ29sUHJvcHMpID0+IChcbiAgPFRhYmxlQ2VsbD5cbiAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTFcIiBjb2xvcj1cInRleHRTZWNvbmRhcnlcIj5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1R5cG9ncmFwaHk+XG4gIDwvVGFibGVDZWxsPlxuKVxuXG5pbnRlcmZhY2UgS2V5VmFsdWVMaXN0UHJvcHMge1xuICBlbnRyaWVzOiBBcnJheTxBcnJheTxhbnk+PlxuICB0aXRsZWl6ZTogYm9vbGVhblxuICBzaG93SGVhZDogYm9vbGVhblxuICB0aXRsZT86IHN0cmluZ1xuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgS2V5VmFsdWVMaXN0ID0gKHtcbiAgZW50cmllcyxcbiAgZXJyb3IgPSAnJyxcbiAgc2hvd0hlYWQgPSBmYWxzZSxcbiAgdGl0bGUsXG4gIHRpdGxlaXplID0gZmFsc2UsXG59OiBLZXlWYWx1ZUxpc3RQcm9wcykgPT4gKFxuICA8Q2FyZD5cbiAgICB7dGl0bGUgJiYgPENhcmRUaXRsZSBkaXZpZGVyPnt0aXRsZX08L0NhcmRUaXRsZT59XG5cbiAgICA8VGFibGU+XG4gICAgICB7c2hvd0hlYWQgJiYgKFxuICAgICAgICA8VGFibGVIZWFkPlxuICAgICAgICAgIDxUYWJsZVJvdz5cbiAgICAgICAgICAgIDxIZWFkQ29sPktleTwvSGVhZENvbD5cbiAgICAgICAgICAgIDxIZWFkQ29sPlZhbHVlPC9IZWFkQ29sPlxuICAgICAgICAgIDwvVGFibGVSb3c+XG4gICAgICAgIDwvVGFibGVIZWFkPlxuICAgICAgKX1cbiAgICAgIDxUYWJsZUJvZHk+e3JlbmRlckJvZHkoZW50cmllcywgZXJyb3IsIHRpdGxlaXplKX08L1RhYmxlQm9keT5cbiAgICA8L1RhYmxlPlxuICA8L0NhcmQ+XG4pXG4iXX0=